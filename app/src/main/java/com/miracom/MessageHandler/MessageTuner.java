/*******************************************************************************
' MessageTuner.java
'
' Copyright (c) 2009 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2009/06/02 10:26:14
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
'******************************************************************************/

package com.miracom.MessageHandler;

import com.miracom.oneoone.transceiverx.Message;
import com.miracom.oneoone.transceiverx.Session;
import com.miracom.oneoone.transceiverx.StreamTransformer;
import com.miracom.oneoone.transceiverx.parser.DeliveryType;
import com.miracom.oneoone.transceiverx.parser.StreamTransformerImpl;

import com.miracom.TRSNode.*;

public class MessageTuner implements MessageDispatcher
{
    private static String mInXmlString;
    private static String mOutXmlString;

    public static String getInXmlString()
    {
        return mInXmlString;
    }

    public static String getOutXmlString()
    {
        return mOutXmlString;
    }
    
    // h101dispatcher member
    public Throwable dispatch(Session issuer, Message msg)
    {
        try 
        {
            String operation = (String)msg.getProperty(MessageHandler.XGEN_TAG_OPERATION);
                if (operation.equals("CallService"))
                {
                    recv_CallService(issuer, msg);
                }
	            else
	            {
	                if (DeliveryType.REQUEST == msg.getDeliveryMode())
	                {
	                	MPMH.getInstance().sendReply(issuer, msg, msg.createReply(), MessageHandler.XGEN_ERROR_UNEXPECTED_OPERATION, "Unexpected Operation!");
	                }
	                return new Exception("Unexpected Operation!(Operation:" + operation + ")");
	            }

            return null;
        }
        catch(Exception e)
        {
            return e;
        }
    }

    private void recv_CallService(Session issuer, Message msg) throws Exception
    {
    	TRSNode in_node;
    	TRSNode out_node;
    	String s_xml_string;
    	
    	String s_module_name;
    	String s_service_name;
    	ServiceDispatcher svcDispatcher;
    	
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        
        s_xml_string = "";
        s_xml_string = MessageType.transform_Message(former);
        mInXmlString = s_xml_string;
        
        in_node = new TRSNode("IN_NODE");
        in_node.parse(s_xml_string);
        
        if(in_node == null)
        	return;
        
        s_module_name = in_node.getString(MessageDefine.MSG_MODULE_NAME);
        s_service_name = in_node.getString(MessageDefine.MSG_SERVICE_NAME);
        
        if (null == s_module_name || 
            0 == s_module_name.trim().compareTo("") ||
            null == (svcDispatcher = (ServiceDispatcher)MPMH.getInstance().getDispatcher().get(s_module_name)))
        {
        	MPMH.getInstance().sendReply(issuer, msg, msg.createReply(), -22, "Unexpected Module!");
            return;
        }

        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            out_node = new TRSNode("MESplus_Out_Message");

            svcDispatcher.dispatch(s_service_name, in_node, out_node);

            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            s_xml_string = "";
            
            s_xml_string = out_node.toXMLString();
            mOutXmlString = s_xml_string;
            
            MessageType.serialize_Message(former, s_xml_string);
            rep.putData(former.getBytes());
            MPMH.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
        else
        {
        	svcDispatcher.dispatch(s_service_name, in_node, null);
        }
    }
}

