/*******************************************************************************
 ' MessageHandler.java
 '
 ' Copyright (c) 2009 by Miracom,Inc.
 ' All rights reserved.
 '
 ' Generated by DevTool XMLGen 1.0
 '
 ' Created at 2009/06/02 10:26:14
 '
 ' Author : Miracom. R&D.
 ' Description : DevTool Xml Generator Version 1.0
 *******************************************************************************/

package com.miracom.MessageHandler;

import java.net.InetAddress;
import java.util.Hashtable;

import com.miracom.oneoone.transceiverx.ErrorCode;
import com.miracom.oneoone.transceiverx.Message;
import com.miracom.oneoone.transceiverx.MessageConsumer;
import com.miracom.oneoone.transceiverx.Session;
import com.miracom.oneoone.transceiverx.SessionEventListener;
import com.miracom.oneoone.transceiverx.Transceiver;
import com.miracom.oneoone.transceiverx.TrxException;
import com.miracom.oneoone.transceiverx.parser.DeliveryType;

interface MessageDispatcher
{
    public Throwable dispatch(Session issuer, Message msg);
}

class MessageUtil
{
    public static int getTrimSize(String str, int size)
    {
        int pos = rtrim(str).length();
        return pos <= size ? pos : size;
    }

    public static String rtrim(String str)
    {
        if (str == null)
            str = "";

        for (int i = 0; i < str.length(); i++)
        {
            if (' ' != str.charAt(i))
                return str.substring(0, i) + str.substring(i).trim();
        }

        return str.trim();
    }

    public static String padding(String str, int size)
    {
        if (null == str)
        {
            for (int i = 0; i < size; i++)
                str += " ";
        }
        else
        {
            while (str.length() < size)
                str += " ";
        }

        return str;
    }
}

public class MessageHandler implements MessageConsumer, SessionEventListener
{
    /* Constants **********************************************************/
    public static final int XGEN_SUCCESS = 0;
    public static final int XGEN_DEFAULT_TTL = 60000;
    public static final int XGEN_DEFAULT_GETMESSAGE_INTERVAL = 60000;
    public static final int XGEN_DEFAULT_RETRY_COUNT = 2;
    public static final int XGEN_DEFAULT_RETRY_TERM = 1000;

    public static final String XGEN_VERSION = "4.0";
    public static final String XGEN_TAG_VERSION = "VERSION";
    public static final String XGEN_TAG_MODULE = "MODULE";
    public static final String XGEN_TAG_INTERFACE = "INTERFACE";
    public static final String XGEN_TAG_OPERATION = "OPERATION";
    public static final String XGEN_TAG_HOSTNAME = "HOSTNAME";
    public static final String XGEN_TAG_HOSTADDR = "HOSTADDR";
    public static final String XGEN_TAG_PEERHOSTNAME = "PEERHOSTNAME";
    public static final String XGEN_TAG_PEERHOSTADDR = "PEERHOSTADDR";
    public static final String XGEN_TAG_RESULT_CODE = "RESULT_CODE";
    public static final String XGEN_TAG_RESULT_MSG = "RESULT_MSG";

    public static final int XGEN_ERROR_UNEXPECTED_VERSION = -0x15;
    public static final int XGEN_ERROR_UNEXPECTED_MODULE = -0x16;
    public static final int XGEN_ERROR_UNEXPECTED_OPERATION = -0x17;

    private String status_message = "";

    public String getMessage()
    {
        return status_message;
    }
    public void setMessage(String msg)
    {
        status_message = msg;
    }

    /* Global variables & Properties **************************************** */
    private Transceiver ioiProcess = null;
    private Session ioiSession = null;
    private String s_peer_host_name;
    private String s_peer_host_addr;

    private Hashtable dispatchers = null;

    public String getHostName()
    {
        String s_name = "";

        try {
            s_name = InetAddress.getLocalHost().getHostName();
        } catch (Exception e) {
            setMessage(e.getMessage());
        }
        return s_name;
    }
    public String getHostAddr()
    {
        String s_addr = "";

        try {
            s_addr = InetAddress.getLocalHost().getHostAddress();
        } catch (Exception e) {
            setMessage(e.getMessage());
        }

        return s_addr;
    }

    public String getPeerHostName()
    {
        return s_peer_host_name;
    }

    public String getPeerHostAddr()
    {
        return s_peer_host_addr;
    }

    public void registerDispatcher(String module, Object tuner)
    {
        this.dispatchers.put(module, tuner);
    }
    public void unregisterDispatcher(String module)
    {
        this.dispatchers.remove(module);
    }

    public Hashtable getDispatcher()
    {
        return dispatchers;
    }

    /* Stub method ********************************************************** */
    public synchronized boolean init(String sessionId)
    {
        return init(sessionId,
                com.miracom.oneoone.transceiverx.Session.SESSION_INNER_STATION_MODE |
                        com.miracom.oneoone.transceiverx.Session.SESSION_PUSH_DELIVERY_MODE,
                "localhost:10101",
                0);
    }
    public synchronized boolean init(String sessionId, int sessionMode, String connectString, int monitoringPort)
    {
        setMessage("");

        try
        {
//            if (null == (ioiProcess = new Transceiver(sessionId, monitoringPort)))
//                throw new Exception("Transceiver Create Failed!");
            if (null == (ioiSession = Transceiver.createSession(sessionId, sessionMode)))
                throw new Exception("Session Create Failed! (Id : " + sessionId + ", Mode : " + sessionMode + ")");
            ioiSession.setDefaultTTL(XGEN_DEFAULT_TTL);
            ioiSession.addSessionEventListener(this);
            ioiSession.connect(connectString);
            if (ioiSession.isPushDeliveryMode())
            {
                ioiSession.addMessageConsumer(this);
            }
            else
            {
                /* Invoke Message Dispatchers Thread */
                Thread dispatcher = new Thread(new Runnable()
                {
                    public void run()
                    {
                        while (true)
                        {
                            try
                            {
                                Message msg = ioiSession.getMessage(XGEN_DEFAULT_GETMESSAGE_INTERVAL);
                                if (null != msg)
                                {
                                    if (DeliveryType.isRequest(msg.getDeliveryMode()))
                                        onRequest(ioiSession, msg);
                                    else if (DeliveryType.isReply(msg.getDeliveryMode()))
                                        onReply(ioiSession, null, msg, null);
                                    else if (DeliveryType.isUnicast(msg.getDeliveryMode()))
                                        onUnicast(ioiSession, msg);
                                    else if (DeliveryType.isMulticast(msg.getDeliveryMode()))
                                        onMulticast(ioiSession, msg);
                                    else if (DeliveryType.isGuaranteedUnicast(msg.getDeliveryMode()))
                                        onGUnicast(ioiSession, msg);
                                    else if (DeliveryType.isGuaranteedMulticast(msg.getDeliveryMode()))
                                        onGMulticast(ioiSession, msg);
                                }
                            }
                            catch (Exception e)
                            {
                                e.printStackTrace();
                            }
                        }
                    }
                });

                dispatcher.setName("Dispatcher for pull mode dispatcher");
                dispatcher.setDaemon(true);
                dispatcher.start();
            }

            dispatchers = new Hashtable();
        }
        catch(Exception e)
        {
            setMessage(e.getMessage());
            return false;
        }

        return true;
    }

    public void term() throws Exception
    {
        ioiSession.removeMessageConsumer(this);
        ioiSession.destroy();
        if (ioiProcess!=null) {
            ioiProcess.term();
        }

        ioiProcess = null;
        ioiSession = null;
        dispatchers = null;
        status_message = null;
    }

    public boolean tune(String channel, int deliveryType)
    {
        try
        {
            setMessage("");

            if (deliveryType == DeliveryType.UNICAST)
                ioiSession.tuneUnicast(channel);
            else if (deliveryType == DeliveryType.MULTICAST)
                ioiSession.tuneMulticast(channel);
            else if (deliveryType == DeliveryType.GUARANTEED_UNICAST)
                ioiSession.tuneGuaranteedUnicast(channel);
            else if (deliveryType == DeliveryType.GUARANTEED_MULTICAST)
                ioiSession.tuneGuaranteedMulticast(channel);
        }
        catch(Exception e)
        {
            setMessage(e.getMessage());
            return false;
        }

        return true;
    }

    public boolean untune(String channel, int deliveryType)
    {
        try
        {
            setMessage("");

            if (deliveryType == DeliveryType.UNICAST)
                ioiSession.untuneUnicast(channel);
            else if (deliveryType == DeliveryType.MULTICAST)
                ioiSession.untuneMulticast(channel);
            else if (deliveryType == DeliveryType.GUARANTEED_UNICAST)
                ioiSession.untuneGuaranteedUnicast(channel);
            else if (deliveryType == DeliveryType.GUARANTEED_MULTICAST)
                ioiSession.untuneGuaranteedMulticast(channel);
        }
        catch(Exception e)
        {
            setMessage(e.getMessage());
            return false;
        }

        return true;
    }

    public Message createMessage() throws TrxException
    {
        setMessage("");
        return ioiSession.createMessage();
    }

    public Message sendMessage(Message msg, String channel, int ttl, short deliveryType)
    {
        Message rep = null;
        Throwable status = null;

        try
        {
            setMessage("");

            msg.putProperty(XGEN_TAG_HOSTNAME, getHostName());
            msg.putProperty(XGEN_TAG_HOSTADDR, getHostAddr());
            msg.putDeliveryMode(deliveryType);
            msg.putChannel(channel);
            msg.putTTL(0 < ttl ? ttl : XGEN_DEFAULT_TTL);

            caster_prologue(msg);

            if (DeliveryType.REQUEST == deliveryType)
            {
                int retryCount = 0;

                do
                {
                    try
                    {
                        if (null == (rep = ioiSession.sendRequest(msg)))
                        {
                            throw new TrxException(ErrorCode.INVALID_MESSAGE);
                        }
                        else
                        {
                            int resultCode = Integer.parseInt((String) rep.getProperty(XGEN_TAG_RESULT_CODE));
                            if (XGEN_SUCCESS == resultCode)
                                break;
                            throw new TrxException(resultCode);
                        }
                    }
                    catch (TrxException trx)
                    {
                        status = trx;
                        if ((trx.getErrorCode() == ErrorCode.CHANNEL_NOTFOUND_TUNER) && (XGEN_DEFAULT_RETRY_COUNT > retryCount))
                        {
                            Thread.sleep(XGEN_DEFAULT_RETRY_TERM);
                            continue;
                        }
                        break;
                    }
                }
                while (XGEN_DEFAULT_RETRY_COUNT > ++retryCount);
            }
            else if (DeliveryType.UNICAST == deliveryType)
                ioiSession.sendUnicast(msg);
            else if (DeliveryType.MULTICAST == deliveryType)
                ioiSession.sendMulticast(msg);
            else if (DeliveryType.GUARANTEED_UNICAST == deliveryType)
                ioiSession.sendGuaranteedUnicast(channel, msg);
            else if (DeliveryType.GUARANTEED_MULTICAST == deliveryType)
                ioiSession.sendGuaranteedMulticast(channel, msg);

            if (null != status)
                throw new Exception(status);
        }
        catch(Exception e)
        {
            try { throw e; }
            catch(Exception ex){ }
        }
        finally
        {
            caster_epilogue(msg, rep, status);
        }

        return rep;
    }

    public void sendReply(Session issuer, Message req, Message rep, int errCode, String errMessage) throws TrxException
    {
        rep.putProperty(XGEN_TAG_HOSTNAME, getHostName());
        rep.putProperty(XGEN_TAG_HOSTADDR, getHostAddr());
        rep.putProperty(XGEN_TAG_RESULT_CODE, String.valueOf(errCode));
        rep.putProperty(XGEN_TAG_RESULT_MSG, errMessage);
        issuer.sendReply(req, rep);
    }

    /*
     * @see com.com.miracom.oneoone.transceiverx.MessageConsumer#onUnicast(Session, Message)
     */
    public void onUnicast(Session issur, Message msg)
    {
        MessageDispatcher tuner = null;

        try
        {
            String version = (String) msg.getProperty(XGEN_TAG_VERSION);
            if (null == version || version.trim().equals("") || !version.equals(XGEN_VERSION))
                return;

            String module = (String) msg.getProperty(XGEN_TAG_MODULE);

            if (null == module || module.equals(""))
                module = (String) msg.getProperty(XGEN_TAG_INTERFACE);
            if (null == module || module.trim().equals("") || null == (tuner = (MessageDispatcher) this.dispatchers.get(module)))
                return;

            s_peer_host_name = (String) msg.getProperty(XGEN_TAG_HOSTNAME);
            s_peer_host_addr = (String) msg.getProperty(XGEN_TAG_HOSTADDR);

            tuner_prologue(msg);
            tuner_epilogue(msg, null, tuner.dispatch(issur, msg));
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    } /*
     * @see com.com.miracom.oneoone.transceiverx.MessageConsumer#onMulticast(Session, Message)
     */
    public void onMulticast(Session issur, Message msg)
    {
        onUnicast(issur, msg);
    }

    /*
     * @see com.com.miracom.oneoone.transceiverx.MessageConsumer#onGUnicast(Session, Message)
     */
    public void onGUnicast(Session issur, Message msg)
    {
        onUnicast(issur, msg);
        try
        {
            issur.sendConfirm(msg, true);
        }
        catch (TrxException e)
        {
            e.printStackTrace();
        }
    }

    /*
     * @see com.com.miracom.oneoone.transceiverx.MessageConsumer#onGMulticast(Session, Message)
     */
    public void onGMulticast(Session issur, Message msg)
    {
        onUnicast(issur, msg);
        try
        {
            issur.sendConfirm(msg, true);
        }
        catch (TrxException e)
        {
            e.printStackTrace();
        }
    }

    /*
     * @see com.com.miracom.oneoone.transceiverx.MessageConsumer#onRequest(Session, Message)
     */
    public void onRequest(Session issuer, Message req)
    {
        MessageDispatcher tuner = null;

        try
        {
            String version = (String) req.getProperty(XGEN_TAG_VERSION);
            if (null == version || version.trim().equals("") || !version.equals(XGEN_VERSION))
            {
                sendReply(issuer, req, req.createReply(), XGEN_ERROR_UNEXPECTED_VERSION, "XGEN_ERROR_UNEXPECTED_VERSION");
                return;
            }

            String module = (String) req.getProperty(XGEN_TAG_MODULE);
            if (null == module || module.equals(""))
                module = (String) req.getProperty(XGEN_TAG_INTERFACE);
            if (null == module || module.trim().equals("") || null == (tuner = (MessageDispatcher) this.dispatchers.get(module)))
            {
                sendReply(issuer, req, req.createReply(), XGEN_ERROR_UNEXPECTED_MODULE, "XGEN_ERROR_UNEXPECTED_MODULE");
                return;
            }

            s_peer_host_name = (String) req.getProperty(XGEN_TAG_HOSTNAME);
            s_peer_host_addr = (String) req.getProperty(XGEN_TAG_HOSTADDR);

            tuner_prologue(req);
            tuner_epilogue(req, null, tuner.dispatch(issuer, req));
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    /*
     * @see com.com.miracom.oneoone.transceiverx.MessageConsumer#onReply(Session, Message, Message, Object)
     */
    public void onReply(Session issur, Message req, Message rep, Object hint)
    {
        // TODO : User code(Using for only asynchronous dispatch mode. but java is not need asynchronous dispatch mode.)
    }

    /*
     * @see com.com.miracom.oneoone.transceiverx.MessageConsumer#onTimeout(Session, Message)
     */
    public void onTimeout(Session issur, Message msg)
    {
        // TODO : User code
    }

    /*
     * @see com.com.miracom.oneoone.transceiverx.SessionEventListener#onConnect(Session)
     */
    public void onConnect(Session issur)
    {
        // TODO : User code
    }

    /*
     * @see com.com.miracom.oneoone.transceiverx.SessionEventListener#onDisconnect(Session)
     */
    public void onDisconnect(Session issur)
    {
        // TODO : User code
    }

    private void caster_prologue(Message msg)
    {
        // TODO : User code
    }

    private void caster_epilogue(Message msg, Message rep, Throwable status)
    {
        // TODO : User code
    }

    private void tuner_prologue(Message msg)
    {
        // TODO : User code
    }

    private void tuner_epilogue(Message msg, Message rep, Throwable status)
    {
        // TODO : User code
    }
}

