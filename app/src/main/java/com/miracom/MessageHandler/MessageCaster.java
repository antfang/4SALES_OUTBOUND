/*******************************************************************************
 ' MessageCaster.java
 '
 ' Copyright (c) 2009 by Miracom,Inc.
 ' All rights reserved.
 '
 ' Generated by DevTool XMLGen 1.0
 '
 ' Created at 2009/06/02 10:26:14
 '
 ' Author : Miracom. R&D.
 ' Description : DevTool Xml Generator Version 1.0
 *******************************************************************************/

package com.miracom.MessageHandler;

import com.miracom.oneoone.transceiverx.Message;
import com.miracom.oneoone.transceiverx.StreamTransformer;
import com.miracom.oneoone.transceiverx.parser.StreamTransformerImpl;

import com.miracom.TRSNode.*;

public class MessageCaster {
    private static String mChannel;
    private static int mTTL;

    private static String mInXmlString;
    private static String mOutXmlString;
    private static String mExeTimeString;
    private static long l_start_time;

    public static String getChannel() {
        return mChannel;
    }

    public static void setChannel(String channel) {
        mChannel = channel;
    }

    public static int getTTL() {
        return mTTL;
    }

    public static void setTTL(int ttl) {
        mTTL = ttl;
    }

    public static String getInXmlString() {
        return mInXmlString;
    }

    public static String getOutXmlString() {
        return mOutXmlString;
    }

    public static String getExeTimeString() {
        return mExeTimeString;
    }

    public static boolean CallService(String s_module_name, String s_service_name, TRSNode in_node, TRSNode out_node) {
        return CallService(s_module_name, s_service_name, in_node, out_node, "", 0, DeliveryMode.RReply);
    }

    public static boolean CallService(String s_module_name, String s_service_name, TRSNode in_node, TRSNode out_node, short mode) {
        return CallService(s_module_name, s_service_name, in_node, out_node, "", 0, mode);
    }

    public static boolean CallService(String s_module_name, String s_service_name, TRSNode in_node, TRSNode out_node, String channel, int ttl, short mode) {
        int i_result_code;

        try {
            l_start_time = System.currentTimeMillis();

            if (DeliveryMode.RReply != mode) /* Just RequestReply */ {
                throw new Exception("Invalid delivery mode!");
            }

            if (null == channel || channel.trim().equals("")) {
                if (null == getChannel() || getChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getChannel();
            }
            ttl = ttl <= 0 ? getTTL() : ttl;

            Message msg = MPMH.getInstance().createMessage();
            msg.putProperty(MessageHandler.XGEN_TAG_VERSION, MessageHandler.XGEN_VERSION);
            msg.putProperty(MessageHandler.XGEN_TAG_MODULE, "MESPLUS");
            msg.putProperty(MessageHandler.XGEN_TAG_INTERFACE, "MESPLUS");
            msg.putProperty(MessageHandler.XGEN_TAG_OPERATION, "CallService");
            msg.putProperty(MessageDefine.MSG_SERVICE_NAME, s_service_name);

            String in_msg = null;
            String out_msg = null;

            mInXmlString = "";
            mOutXmlString = "";

            in_node.addString(MessageDefine.MSG_SERVICE_NAME, s_service_name);
            in_node.addString(MessageDefine.MSG_MODULE_NAME, s_module_name);

            in_msg = in_node.toXMLString();
            mInXmlString = in_msg;

            StreamTransformer former = new StreamTransformerImpl();
            MessageType.serialize_Message(former, in_msg);
            msg.putData(former.getBytes());
            Message rep = MPMH.getInstance().sendMessage(msg, channel, ttl, mode);

            if (DeliveryMode.RReply == mode) /* Just RequestReply */ {
                if (null == rep)
                    throw new Exception("Invalid Message!");

                i_result_code = Integer.parseInt((String) rep.getProperty(MessageHandler.XGEN_TAG_RESULT_CODE));
                if (i_result_code != MessageHandler.XGEN_SUCCESS) {
                    mOutXmlString = rep.getProperty(MessageHandler.XGEN_TAG_RESULT_MSG).toString();
                    throw new Exception(mOutXmlString);
                }

                former = new StreamTransformerImpl((byte[]) rep.getData());
                out_msg = MessageType.transform_Message(former);

                mOutXmlString = out_msg;

                out_node.init();
                out_node.parse(out_msg);
            }

            return true;
        } catch (Exception e) {
            MPMH.setStatusMessage(e.getMessage());
            return false;
        } finally {
            long l_elapse_time;
            l_elapse_time = System.currentTimeMillis() - l_start_time;
            mExeTimeString = Long.toString(l_elapse_time);
        }
    }

    public static boolean CallService(String s_module_name, String s_service_name, TRSNode in_node) {
        return CallService(s_module_name, s_service_name, in_node, "", 0, DeliveryMode.Unicast);
    }

    public static boolean CallService(String s_module_name, String s_service_name, TRSNode in_node, short mode) {
        return CallService(s_module_name, s_service_name, in_node, "", 0, mode);
    }

    public static boolean CallService(String s_module_name, String s_service_name, TRSNode in_node, String channel, int ttl, short mode) {
        try {
            l_start_time = System.currentTimeMillis();

            if (DeliveryMode.RReply != mode) /* Just RequestReply */ {
                throw new Exception("Invalid delivery mode!");
            }

            if (null == channel || channel.trim().equals("")) {
                if (null == getChannel() || getChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getChannel();
            }
            ttl = ttl <= 0 ? getTTL() : ttl;

            Message msg = MPMH.getInstance().createMessage();
            msg.putProperty(MessageHandler.XGEN_TAG_VERSION, MessageHandler.XGEN_VERSION);
            msg.putProperty(MessageHandler.XGEN_TAG_MODULE, "MESPLUS");
            msg.putProperty(MessageHandler.XGEN_TAG_INTERFACE, "MESPLUS");
            msg.putProperty(MessageHandler.XGEN_TAG_OPERATION, "CallService");
            msg.putProperty(MessageDefine.MSG_SERVICE_NAME, s_service_name);

            String in_msg = null;

            mInXmlString = "";
            mOutXmlString = "";

            in_node.addString(MessageDefine.MSG_SERVICE_NAME, s_service_name);
            in_node.addString(MessageDefine.MSG_MODULE_NAME, s_module_name);

            in_msg = in_node.toXMLString();
            mInXmlString = in_msg;

            StreamTransformer former = new StreamTransformerImpl();
            MessageType.serialize_Message(former, in_msg);
            msg.putData(former.getBytes());

            MPMH.getInstance().sendMessage(msg, channel, ttl, mode);

            return true;
        } catch (Exception e) {
            MPMH.setStatusMessage(e.getMessage());
            return false;
        } finally {
            long l_elapse_time;
            l_elapse_time = System.currentTimeMillis() - l_start_time;
            mExeTimeString = Long.toString(l_elapse_time);
        }
    }
}

